#! /bin/sh
### BEGIN INIT INFO
# Provides:          gpgmailer
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: GPG Mailer
# Description:       Init script for GPG Mailer. Mails selected individuals a GPG signed and encrypted message. 
### END INIT INFO

# Author: Joel Luellwitz <eviljoel@linux.com>
# Author: Andrew Klapp

# Do NOT "set -e"

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="GPG Mailer"
NAME=gpgmailer
DAEMON=/opt/gpgmailer/gpgmailer-daemon.py
DAEMON_ARGS=
PIDFILE=/var/opt/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
MAIL_DIR=/tmp/gpgmailer

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/opt/default/$NAME ] && . /etc/opt/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Yeah, we should probably do this in gpgmailer.py but we need to get this done.
    # TODO: This does not honor the config and should be fixed. Probably best to move
    #   this into gpgmailer-daemon.py

    # Create /tmp if it doesn't exist (it should exist)    
    if [ ! -d "$MAIL_DIR" ]; then
        mkdir -p "$MAIL_DIR"
    fi
    # If $MAIL_DIR is empty and not mounted as a ramdisk, mount it as a ramdisk.
    if ! -z find / -type d -path "$MAIL_DIR" 2> /dev/null && ! mount | grep -q "^none on $MAIL_DIR type tmpfs"; then
        echo "Attempting to mount $MAIL_DIR as a ramdisk."
        mount -t tmpfs -o size=25% none "$MAIL_DIR" 
    fi
    # If $MAIL_DIR is not mounted as a ramdisk, something is wrong. Bail!
    if ! mount | grep -q "^none on $MAIL_DIR type tmpfs"; then
        echo "Count not mount $MAIL_DIR as a ramdisk. Startup failed."
        return 2
    fi
    if ! -d "$MAIL_DIR/outbox"; then
        mkdir "$MAIL_DIR/outbox"
    fi
    if ! -d "$MAIL_DIR/draft"; then
        mkdir "$MAIL_DIR/draft"
    fi
    if ! -d "$MAIL_DIR/outbox" || ! -d "$MAIL_DIR/draft"; then
        echo "Count not create required sub directories in $MAIL_DIR/. Startup failed."
        return 2
    fi
    
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --quiet --pidfile "$PIDFILE" --name python2 --startas "$DAEMON" --test > /dev/null \
        || return 1
    start-stop-daemon --start --quiet --pidfile "$PIDFILE" --name python2 --startas "$DAEMON" -- \
        "$DAEMON_ARGS" || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile "$PIDFILE" --name python2
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f "$PIDFILE"
    return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc -p "$PIDFILE" "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
